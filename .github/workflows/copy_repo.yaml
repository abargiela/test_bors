name: copy repo

on: #workflow_dispatch
  push:

jobs:
  copy_repo:
    name: copy-repo
    runs-on: macos-latest
    timeout-minutes: 70
    steps:

        - name: Install SSH key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.BORS }}
            known_hosts: ${{ secrets.KNOWN_HOSTS }}

        - uses: actions/checkout@v2

        - run: mkdir -p artifact_test

        - run: echo hello2 > artifact_test/world2.txt
        - run: echo helloe2 > artifact_test/worlde2.txt
        - run: echo a 
        - run: pwd

        - name: Get current branch
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          id: current_branch

        - run: echo c 
        - run: pwd
        - name: copy repo
          shell: bash
          run: |
            # Create a temporary folder to clone the other repo
            CLONE_DIR=$(mktemp -d)
            DST_REPO='abargiela/test_bors_ng_v1'
            EMAIL='ci@project.io'
            USERNAME='ci'
            BRANCH=${{ steps.current_branch.outputs.branch }}
            SRC_COMMIT=$(git rev-parse HEAD)
            
            # Set the key to be able to clone the repo
            git config --global user.email $EMAIL
            git config --global user.name $USERNAME

            echo d 
            pwd
            echo $CLONE_DIR
            echo clone dir above path
             # cloning the destination repo
            BRANCH_EXISTS=$(git ls-remote --heads "git@github.com:$DST_REPO.git" $BRANCH | wc -l);
            if [ $BRANCH_EXISTS -eq 0 ];then
              git clone --depth 1 "git@github.com:$DST_REPO.git" $CLONE_DIR
              cd $CLONE_DIR
            else
              git clone -b $BRANCH --depth 1 "git@github.com:$DST_REPO.git" $CLONE_DIR;
              cd $CLONE_DIR
            fi


            # Cleaning all files on the destination repository
            git rm -r .


            echo e 
            pwd
            # Copy all files from the src repo to the dst repo
            cd - ;
            rsync -avz * .gitignore  $CLONE_DIR \
              --exclude '.git' \
              --exclude '.github';

            cd $CLONE_DIR
            ls -laR 

            echo f 
            pwd

            find . -name world2.txt
            pwd
            # If anything is modified is commited
            git status --porcelain | wc -l
            if [ $(git status --porcelain | wc -l) -gt 0 ]; then
            git commit --message "Commit: $SRC_COMMIT - Copy Repo: $GITHUB_REPOSITORY to Repo: $DST_REPO -  Branch: $BRANCH"
                git push -u origin HEAD:$BRANCH
                echo last-n
                pwd
                echo FIND
                find . -name world2.txt 
            fi

